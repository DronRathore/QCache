var net = require("net");
var Parser = require("./parser.js").parser;
var users = require("./user.js").user;
exports.server = {
		sockets:{},
		init:function(handler, port){
			net.createServer(function(socket){
					exports.server.sockets[socket] = {valid:false, data:"", user: null, lastCommand: null, timestamp: new Date() };
				socket.on('end', function(){
					exports.server.sockets[socket] = undefined;
				});
				socket.on('error', function(socket){
					exports.server.sockets[this] = null;
				});
				socket.on('data', function(data){
						if (exports.server.sockets[this]) {
							if ( exports.server.sockets[this].valid ) {
								/*
									Check the state of the socket stream
								*/
								if ( data.toString().charCodeAt(data.toString().length -2) == 13 ) 
									exports.server.sockets[this].data += data.toString().substr(0, data.toString().length - 2);
								if (data.toString().charCodeAt(0) != 13 && data.toString().charCodeAt(data.toString().length - 2) != 13) {
										if (data.toString().charCodeAt(0) >= 32 && data.toString().charCodeAt(0) <= 122)
											exports.server.sockets[this].data += data.toString();
								} else {
									/*
										Execute the Command :)
									*/
									handler(exports.server.sockets[this].data, this);
									exports.server.sockets[this].data = "";
								}
								
							} else {
								/*
									This is an intial session
									so need to be authenticated first
									Read the very first line of bytes sent to us
									It should be in the form of:
									login username password
									where password should be a md5 string
								*/
								if ( data.toString().charCodeAt(data.toString().length -2) == 13 ) 
										exports.server.sockets[this].data += data.toString().substr(0, data.toString().length - 2);
									if (data.toString().charCodeAt(0) != 13 && data.toString().charCodeAt(data.toString().length -2) != 13) {
										if (data.toString().charCodeAt(0) >= 32 && data.toString().charCodeAt(0) <= 122)
											exports.server.sockets[this].data += data.toString();
									}
									else {
										/*
											We have the login command, lets validate it
										*/
										var parser = new Parser();
										var parts = parser.explode(exports.server.sockets[this].data, " ");
										if (  parts[0] == "login" && users.validate(parts[1], parts[2])) {
											/*
												This is a valid session, set the bit and user object properties
											*/
											exports.server.sockets[socket].valid = true;
											exports.server.sockets[socket].data = "";
											exports.server.sockets[socket].user = parts[1];
											exports.server.sockets[socket].timestamp = new Date();
											this.write("200");
										} else {
											/*
												Invalid entry point, send error
											*/
											this.write("503");
											this.destroy();
										}
									}
									
							}
						} else {
							/*
								Unknown Socket: Maybe a unclosed connectionn
							*/
						}
					});
			}).listen(port);
		}
};