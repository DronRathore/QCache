/*
	Parser for Qt
*/
exports.parser = function() {
	if (this instanceof exports.parser ){
		this.action = 0;
		return this;
	}
	else
		return new exports.parser();
};
exports.parser.prototype.parse = function(statement) {
	if (type = this.getCommand(statement)) {
		this.action = type;
	}
	return this;
};
exports.parser.prototype.explode = function(string, marker, counts, returnAsObject){
	var parts = returnAsObject?{}:new Array();
	counter = counts?counts:1;
	while ( string.indexOf(marker) != -1 && counter != 0 ) {
		var subStr = string.substr(0, string.indexOf(marker));
		if ( !returnAsObject ) {
			if ( counts && counter == counts )
				parts.push(subStr);
			if (!counts)
				parts.push(subStr);
		}
		else {
			if ( counts && counter == counts )
				parts[subStr] = true;
			if ( !counts )
				parts[subStr] = true;
		}
		string = string.substr(string.indexOf(marker)+1, string.length);
		if (counts){
			counter = counts;
			counts --;
		}
	}
	if (counter == 1 && string != "")
		if ( !returnAsObject )
			parts.push(string);
		else
			parts[string] = true;
	return parts;
};

